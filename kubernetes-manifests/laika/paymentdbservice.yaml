apiVersion: apps/v1
kind: Deployment # what to create?
metadata:
  name: paymentdbservice  
  labels:
    name: mysql
    tags.datadoghq.com/env: "gameday"
    tags.datadoghq.com/service: "paymentdbservice"
    tags.datadoghq.com/version: "0.5.0"
spec: # specification for deployment resource
  replicas: 1 # how many replicas of pods we want to create
  selector:
    matchLabels:
      app: paymentdbservice
  template: # blueprint for pods
    metadata:
      name: paymentdbservice
      labels:
        app: paymentdbservice # service will look for this label
        name: paymentdbservice
        tags.datadoghq.com/env: "gameday"
        tags.datadoghq.com/service: "paymentdbservice"
        tags.datadoghq.com/version: "0.5.0"
      annotations:
        ad.datadoghq.com/paymentdbservice.checks: |
          {
            "mysql": {
              "instances": [
                {
                  "dbm": "true",
                  "host": "paymentdbservice",
                  "port": 3306,
                  "username": "datadog",
                  "password": "bitsGoodBoy"
                }
              ]
            }
          }
        ad.datadoghq.com/paymentdbservice.logs: '[{"source": "mysql", "service": "paymentdbservice"}]'
    spec: # specification for pods
      containers: # we can have one or more containers
      - name: paymentdbservice
        image: mariadb
        ports:
        - containerPort: 3306 
        env:
        #- name: MARIADB_RANDOM_ROOT_PASSWORD
        - name: MARIADB_ALLOW_EMPTY_ROOT_PASSWORD
          value: "0" # if it is 1 and root_password is set, root_password takes precedance
        - name: MARIADB_ROOT_PASSWORD
          value: topsecret
        volumeMounts:
          - name: mysql-initdb
            mountPath: /docker-entrypoint-initdb.d
          - name: mariadb-config
            mountPath: /etc/mysql/conf.d/ # directory will be cleaned at the beginning
      volumes:
        - name: mysql-initdb
          configMap:
            name: mysql-initdb-config
        - name: mariadb-config
          configMap:
            name: mariadb-configmap
            defaultMode: 0644
            items:
            - key: mariadb.cnf
              path: plugin-configuration.cnf
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mariadb-configmap
data:
  mariadb.cnf: |
    [mariadb]
    performance_schema=ON
    max_digest_length=4096
    performance_schema_max_digest_length=4096
    performance-schema-instrument='stage/%=ON'
    performance-schema-consumer-events-stages-current=ON
    performance-schema-consumer-events-stages-history=ON
    performance-schema-consumer-events-stages-history-long=ON
    performance-schema-consumer-events-statements-current=ON
    performance-schema-consumer-events-waits-current=ON
    performance-schema-consumer-events-statements-history-long=ON
    performance-schema-consumer-events-statements-history=ON
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
data:
  init.sql: |
      CREATE USER datadog@'%' IDENTIFIED by 'bitsGoodBoy';
      ALTER USER datadog@'%' WITH MAX_USER_CONNECTIONS 5;
      GRANT REPLICATION CLIENT ON *.* TO datadog@'%';
      GRANT PROCESS ON *.* TO datadog@'%';
      GRANT SELECT ON performance_schema.* TO datadog@'%';
      CREATE SCHEMA IF NOT EXISTS datadog;
      GRANT EXECUTE ON datadog.* to datadog@'%';
      GRANT CREATE TEMPORARY TABLES ON datadog.* TO datadog@'%';
      DELIMITER $$
      CREATE PROCEDURE datadog.explain_statement(IN query TEXT)
      SQL SECURITY DEFINER
      BEGIN
      SET @explain := CONCAT('EXPLAIN FORMAT=json ', query);
      PREPARE stmt FROM @explain;
      EXECUTE stmt;
      DEALLOCATE PREPARE stmt;
      END $$
      DELIMITER ;
      DELIMITER $$
      CREATE PROCEDURE datadog.enable_events_statements_consumers()
      SQL SECURITY DEFINER
      BEGIN
      UPDATE performance_schema.setup_consumers SET enabled='YES' WHERE name LIKE 'events_statements_%';
      UPDATE performance_schema.setup_consumers SET enabled='YES' WHERE name = 'events_waits_current';
      END $$
      DELIMITER ;
      GRANT EXECUTE ON PROCEDURE datadog.enable_events_statements_consumers TO datadog@'%';
      CREATE SCHEMA IF NOT EXISTS paymentdb;
      CREATE USER swagstore@'%' IDENTIFIED BY 'weLoveSwagAtgameday';
      GRANT ALL PRIVILEGES on paymentdb.* to swagstore@'%';
      DELIMITER $$
      CREATE PROCEDURE paymentdb.explain_statement(IN query TEXT)
      SQL SECURITY DEFINER
      BEGIN
      SET @explain := CONCAT('EXPLAIN FORMAT=json ', query);
      PREPARE stmt FROM @explain;
      EXECUTE stmt;
      DEALLOCATE PREPARE stmt;
      END $$
      DELIMITER ;
      GRANT EXECUTE ON PROCEDURE paymentdb.explain_statement TO datadog@'%';
---
apiVersion: v1
kind: Service
metadata:
  name: paymentdbservice
spec:
  type: ClusterIP
  selector:
    app: paymentdbservice
  ports:
  - name: tcp-mariadb
    port: 3306
    targetPort: 3306
