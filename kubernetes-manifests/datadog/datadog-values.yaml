###
## Datadog Agent and Cluster Helm Configuration
###

## Naming and Traget Architecture
nameOverride: datadog-agent
fullnameOverride: datadog-agent
targetSystem: "linux"

agents:
  ## Define the Datadog image to work with
  image:
    # agents.image.name -- Datadog Agent image name to use (relative to `registry`)

    ## use "dogstatsd" for Standalone Datadog Agent DogStatsD 7
    name: agent

    # agents.image.tag -- Define the Agent version to use
    tag: 7.46.0

clusterAgent:
  ## The Datadog Cluster Agent provides a streamlined, centralized approach to collecting cluster level monitoring data. 
  ## Datadog strongly recommends using the Cluster Agent for monitoring Kubernetes.
  enabled: true
  rbac:
    create: true

  ## Admission Controller for on the flight tagging
  admissionController:
    enabled: true

  ## Custom metrics server
  metricsProvider:
    enabled: true
  
  ## Enable replications required for Admission Controller and Metrics Provider
  replicas: 2
  createPodDisruptionBudget: true

datadog:
  ## Set APIkey and APPKey Optionally the site
  apiKeyExistingSecret: datadog-secret
  appKeyExistingSecret: datadog-secret
  # site: <DATADOG_SITE>
  ## Set log level
  # logLevel: info
  ## Set global tags
  tags:
    - env: gameday

  ## Enable Log collections
  logs:
    enabled: true
    containerCollectAll: true

  ## Collect kubernetes events
  collectEvents: true

  ## Enable Network Performance monitoring
  networkMonitoring:
    enabled: true

  serviceMonitoring:
      enabled: true    

  ## Enable process collection
  # If can't detect cluster name:
  # clusterName: <YOUR_CLUSTER_NAME>
  processAgent:
    enabled: true
    processCollection: true

  ## Enable Orchestration Explorer
  orchestratorExplorer:
    enabled: true

  ## Enable APM
  apm:
    socketEnabled: true
    portEnabled: true

  ## Enable APM  Remote configuration
  remoteConfiguration:
    enabled: true

  remoteInstrumentation:
    enabled: true 

  ## Enable Cloud Security Posture Management and Cloud Workload Security
  securityAgent:
    runtime:
      enabled: true
    compliance:
      enabled: true

  ## Set up kubelet communication configuration
  kubelet:
    host:
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP
  # Enable data to be sent with invalid certs (required for kind cluster)
    tlsVerify: false
  clusterName: gd-cluster1

  ## Set up global environment for agent and pods communication
  env:
    - name: DD_HOSTNAME
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP

  ## Ignore Auto discovery for minikube
  # ignoreAutoConfig:
  #   - etcd
  #   - kube_controller_manager
  #   - kube_scheduler

  ## OTLP ingest related configuration
  otlp:
    enabled: true
    receiver:
      protocols:
        # datadog.otlp.receiver.protocols.grpc - OTLP/gRPC configuration
        grpc:
          # datadog.otlp.receiver.protocols.grpc.enabled -- Enable the OTLP/gRPC endpoint
          enabled: false
          # datadog.otlp.receiver.protocols.grpc.endpoint -- OTLP/gRPC endpoint
          endpoint: "0.0.0.0:4317"
          # datadog.otlp.receiver.protocols.grpc.useHostPort -- Enable the Host Port for the OTLP/gRPC endpoint
          useHostPort: true
        # datadog.otlp.receiver.protocols.http - OTLP/HTTP configuration
        http:
          # datadog.otlp.receiver.protocols.http.enabled -- Enable the OTLP/HTTP endpoint
          enabled: false
          # datadog.otlp.receiver.protocols.http.endpoint -- OTLP/HTTP endpoint
          endpoint: "0.0.0.0:4318"
          # datadog.otlp.receiver.protocols.http.useHostPort -- Enable the Host Port for the OTLP/HTTP endpoint
          useHostPort: true

providers:
  aks:
    enabled: true